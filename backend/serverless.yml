service: skills-matrix-backend

plugins:
  - serverless-offline

custom:
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:provider.stage}, self:custom.tableThroughputs.default}

provider:
  name: aws
  runtime: nodejs10.x
  versionFunctions: false
  memorySize: 128
  region: us-east-1
  logRetentionInDays: 30
  stage: ${opt:stage, 'dev'}
  environment:
    TABLENAME: ${opt:stage, self:provider.stage}-SkillsTable
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:BatchWriteItem
        - dynamodb:DeleteItem
      Resource:
        - { 'Fn::GetAtt': ['SkillsTable', 'Arn'] }
        - {
            'Fn::Join':
              ['/', [{ 'Fn::GetAtt': ['SkillsTable', 'Arn'] }, 'index/*']],
          }

functions:
  skillsList:
    handler: lambda/skillsList.skillsList
    name: ${self:provider.stage}-skillsList
    description: 'CRUD function for skills in the table, ${self:provider.environment.TABLENAME}'
    events:
      - http:
          path: /skillslist
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: /skillslist
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: /skillslist/{skillId}
          method: patch
          cors: true
          authorizer: aws_iam
      - http:
          path: /skillslist/{skillId}
          method: delete
          cors: true
          authorizer: aws_iam

  skillsUser:
    handler: lambda/skillsUser.skillsUser
    name: ${self:provider.stage}-skillsUser
    description: 'CRUD function for user skills in ${self:provider.environment.TABLENAME}'
    events:
      - http:
          path: /user/skills
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: /user/skills
          method: post
          cors: true
          authorizer: aws_iam

  trainingList:
    handler: lambda/trainingList.trainingList
    name: ${self:provider.stage}-trainingList
    description: 'CRUD function for user training in ${self:provider.environment.TABLENAME}'
    events:
      - http:
          path: /user/training
          method: get
          cors: true
          authorizer: aws_iam
      - http:
          path: /user/training
          method: post
          cors: true
          authorizer: aws_iam
      - http:
          path: /user/training/{skillId}
          method: delete
          cors: true
          authorizer: aws_iam

resources:
  Resources:
    SkillsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.TABLENAME}
        AttributeDefinitions:
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: skillId
            AttributeType: S
        KeySchema:
          - AttributeName: itemId
            KeyType: HASH
          - AttributeName: skillId
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: ${self:custom.tableThroughput}
          WriteCapacityUnits: ${self:custom.tableThroughput}
        GlobalSecondaryIndexes:
          - IndexName: skillId-index
            KeySchema:
              - AttributeName: skillId
                KeyType: HASH
              - AttributeName: itemId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: ${self:custom.tableThroughput}
              WriteCapacityUnits: ${self:custom.tableThroughput}

package:
  exclude:
    - mocks/**
  include:
    - ../node_modules/uuid/**
