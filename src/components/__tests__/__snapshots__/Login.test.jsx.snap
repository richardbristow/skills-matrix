// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login should render the login form without throwing an error 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <h2>
          Login
        </h2>,
        <ForwardRef(Bootstrap(Form))
          className="justify-content-center"
          noValidate={true}
          onSubmit={[Function]}
          validated={false}
        >
          <ForwardRef(Bootstrap(FormGroup))
            controlId="email"
          >
            <ForwardRef(ContextTransform)
              autoFocus={true}
              onChange={[Function]}
              placeholder="Email"
              required={true}
              type="email"
              value=""
            />
            <Feedback
              as="div"
              type="invalid"
            >
              Please provide a valid email address.
            </Feedback>
          </ForwardRef(Bootstrap(FormGroup))>
          <ForwardRef(Bootstrap(FormGroup))
            controlId="password"
          >
            <ForwardRef(ContextTransform)
              onChange={[Function]}
              placeholder="Password"
              required={true}
              type="password"
              value=""
            />
            <Feedback
              as="div"
              type="invalid"
            >
              Please provide a password.
            </Feedback>
          </ForwardRef(Bootstrap(FormGroup))>
          <ForwardRef(Bootstrap(Button))
            block={true}
            disabled={true}
            type="submit"
            variant="outline-primary"
          >
            Login
          </ForwardRef(Bootstrap(Button))>
        </ForwardRef(Bootstrap(Form))>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Login",
        },
        "ref": null,
        "rendered": "Login",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef(Bootstrap(FormGroup))
              controlId="email"
            >
              <ForwardRef(ContextTransform)
                autoFocus={true}
                onChange={[Function]}
                placeholder="Email"
                required={true}
                type="email"
                value=""
              />
              <Feedback
                as="div"
                type="invalid"
              >
                Please provide a valid email address.
              </Feedback>
            </ForwardRef(Bootstrap(FormGroup))>,
            <ForwardRef(Bootstrap(FormGroup))
              controlId="password"
            >
              <ForwardRef(ContextTransform)
                onChange={[Function]}
                placeholder="Password"
                required={true}
                type="password"
                value=""
              />
              <Feedback
                as="div"
                type="invalid"
              >
                Please provide a password.
              </Feedback>
            </ForwardRef(Bootstrap(FormGroup))>,
            <ForwardRef(Bootstrap(Button))
              block={true}
              disabled={true}
              type="submit"
              variant="outline-primary"
            >
              Login
            </ForwardRef(Bootstrap(Button))>,
          ],
          "className": "justify-content-center",
          "noValidate": true,
          "onSubmit": [Function],
          "validated": false,
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef(ContextTransform)
                  autoFocus={true}
                  onChange={[Function]}
                  placeholder="Email"
                  required={true}
                  type="email"
                  value=""
                />,
                <Feedback
                  as="div"
                  type="invalid"
                >
                  Please provide a valid email address.
                </Feedback>,
              ],
              "controlId": "email",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "autoFocus": true,
                  "onChange": [Function],
                  "placeholder": "Email",
                  "required": true,
                  "type": "email",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Feedback": [Function],
                  "defaultProps": undefined,
                  "propTypes": undefined,
                  "render": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "as": "div",
                  "children": "Please provide a valid email address.",
                  "type": "invalid",
                },
                "ref": null,
                "rendered": "Please provide a valid email address.",
                "type": [Function],
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "children": Array [
                <ForwardRef(ContextTransform)
                  onChange={[Function]}
                  placeholder="Password"
                  required={true}
                  type="password"
                  value=""
                />,
                <Feedback
                  as="div"
                  type="invalid"
                >
                  Please provide a password.
                </Feedback>,
              ],
              "controlId": "password",
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "onChange": [Function],
                  "placeholder": "Password",
                  "required": true,
                  "type": "password",
                  "value": "",
                },
                "ref": null,
                "rendered": null,
                "type": Object {
                  "$$typeof": Symbol(react.forward_ref),
                  "Feedback": [Function],
                  "defaultProps": undefined,
                  "propTypes": undefined,
                  "render": [Function],
                },
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "class",
                "props": Object {
                  "as": "div",
                  "children": "Please provide a password.",
                  "type": "invalid",
                },
                "ref": null,
                "rendered": "Please provide a password.",
                "type": [Function],
              },
            ],
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "block": true,
              "children": "Login",
              "disabled": true,
              "type": "submit",
              "variant": "outline-primary",
            },
            "ref": null,
            "rendered": "Login",
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "Check": Object {
            "$$typeof": Symbol(react.forward_ref),
            "Input": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Label": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Control": Object {
            "$$typeof": Symbol(react.forward_ref),
            "Feedback": [Function],
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Group": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Label": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Row": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "Text": Object {
            "$$typeof": Symbol(react.forward_ref),
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
          "defaultProps": undefined,
          "propTypes": undefined,
          "render": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "Login__StyledLogin-sc-4kj774-0",
        "isStatic": true,
        "rules": Array [
          "@media all and (min-width:480px){max-width:350px;padding-top:80px;margin:0 auto;}",
        ],
      },
      "displayName": "Login__StyledLogin",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "Login__StyledLogin-sc-4kj774-0",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <h2>
            Login
          </h2>,
          <ForwardRef(Bootstrap(Form))
            className="justify-content-center"
            noValidate={true}
            onSubmit={[Function]}
            validated={false}
          >
            <ForwardRef(Bootstrap(FormGroup))
              controlId="email"
            >
              <ForwardRef(ContextTransform)
                autoFocus={true}
                onChange={[Function]}
                placeholder="Email"
                required={true}
                type="email"
                value=""
              />
              <Feedback
                as="div"
                type="invalid"
              >
                Please provide a valid email address.
              </Feedback>
            </ForwardRef(Bootstrap(FormGroup))>
            <ForwardRef(Bootstrap(FormGroup))
              controlId="password"
            >
              <ForwardRef(ContextTransform)
                onChange={[Function]}
                placeholder="Password"
                required={true}
                type="password"
                value=""
              />
              <Feedback
                as="div"
                type="invalid"
              >
                Please provide a password.
              </Feedback>
            </ForwardRef(Bootstrap(FormGroup))>
            <ForwardRef(Bootstrap(Button))
              block={true}
              disabled={true}
              type="submit"
              variant="outline-primary"
            >
              Login
            </ForwardRef(Bootstrap(Button))>
          </ForwardRef(Bootstrap(Form))>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Login",
          },
          "ref": null,
          "rendered": "Login",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef(Bootstrap(FormGroup))
                controlId="email"
              >
                <ForwardRef(ContextTransform)
                  autoFocus={true}
                  onChange={[Function]}
                  placeholder="Email"
                  required={true}
                  type="email"
                  value=""
                />
                <Feedback
                  as="div"
                  type="invalid"
                >
                  Please provide a valid email address.
                </Feedback>
              </ForwardRef(Bootstrap(FormGroup))>,
              <ForwardRef(Bootstrap(FormGroup))
                controlId="password"
              >
                <ForwardRef(ContextTransform)
                  onChange={[Function]}
                  placeholder="Password"
                  required={true}
                  type="password"
                  value=""
                />
                <Feedback
                  as="div"
                  type="invalid"
                >
                  Please provide a password.
                </Feedback>
              </ForwardRef(Bootstrap(FormGroup))>,
              <ForwardRef(Bootstrap(Button))
                block={true}
                disabled={true}
                type="submit"
                variant="outline-primary"
              >
                Login
              </ForwardRef(Bootstrap(Button))>,
            ],
            "className": "justify-content-center",
            "noValidate": true,
            "onSubmit": [Function],
            "validated": false,
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef(ContextTransform)
                    autoFocus={true}
                    onChange={[Function]}
                    placeholder="Email"
                    required={true}
                    type="email"
                    value=""
                  />,
                  <Feedback
                    as="div"
                    type="invalid"
                  >
                    Please provide a valid email address.
                  </Feedback>,
                ],
                "controlId": "email",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "autoFocus": true,
                    "onChange": [Function],
                    "placeholder": "Email",
                    "required": true,
                    "type": "email",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Feedback": [Function],
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "div",
                    "children": "Please provide a valid email address.",
                    "type": "invalid",
                  },
                  "ref": null,
                  "rendered": "Please provide a valid email address.",
                  "type": [Function],
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "children": Array [
                  <ForwardRef(ContextTransform)
                    onChange={[Function]}
                    placeholder="Password"
                    required={true}
                    type="password"
                    value=""
                  />,
                  <Feedback
                    as="div"
                    type="invalid"
                  >
                    Please provide a password.
                  </Feedback>,
                ],
                "controlId": "password",
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "onChange": [Function],
                    "placeholder": "Password",
                    "required": true,
                    "type": "password",
                    "value": "",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "Feedback": [Function],
                    "defaultProps": undefined,
                    "propTypes": undefined,
                    "render": [Function],
                  },
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "class",
                  "props": Object {
                    "as": "div",
                    "children": "Please provide a password.",
                    "type": "invalid",
                  },
                  "ref": null,
                  "rendered": "Please provide a password.",
                  "type": [Function],
                },
              ],
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "block": true,
                "children": "Login",
                "disabled": true,
                "type": "submit",
                "variant": "outline-primary",
              },
              "ref": null,
              "rendered": "Login",
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "Check": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Input": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
              "Label": Object {
                "$$typeof": Symbol(react.forward_ref),
                "defaultProps": undefined,
                "propTypes": undefined,
                "render": [Function],
              },
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Control": Object {
              "$$typeof": Symbol(react.forward_ref),
              "Feedback": [Function],
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Group": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Label": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Row": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "Text": Object {
              "$$typeof": Symbol(react.forward_ref),
              "defaultProps": undefined,
              "propTypes": undefined,
              "render": [Function],
            },
            "defaultProps": undefined,
            "propTypes": undefined,
            "render": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "Login__StyledLogin-sc-4kj774-0",
          "isStatic": true,
          "rules": Array [
            "@media all and (min-width:480px){max-width:350px;padding-top:80px;margin:0 auto;}",
          ],
        },
        "displayName": "Login__StyledLogin",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "Login__StyledLogin-sc-4kj774-0",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
  Symbol(enzyme.__childContext__): null,
}
`;
